package main;

import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;

import node.*;
import tree.TreeGenerator;

/**
 * main.java
 * @author Kevin Gao (kgao03) on 2020-9-27
 * 
 * Driver class for the Roomba Reflex Agent
 * Creates a Roomba instance and simulates cycles
 */
public class Main {

	/**
	 * Main function of the program
	 */
	public static void main(String[] args) {
		initiateTesting();
	}
	
	/**
	 * Starts user-driven testing of the Roomba
	 */
	private static void initiateTesting() {
		/** Welcome message */
		System.out.println("Welcome to the Roomba Testing Program!\n");
		System.out.println(
				"We simulate a real-life scenario by turning on "
				+ "each command (SPOT/GENERAL) and "
				+ "sensor (DUSTY SPOT) at a specific cycle.\n");

		/** Query and retrieve user input */
		Scanner in = new Scanner(System.in);
		int choice = 0;
		do {
			System.out.println(
					"To run a test, you can 1) Choose these cycles "
					+ "yourself or 2) Have them randomly generated by the "
					+ "system.");
			System.out.print("\nPlease enter either 1 or 2 "
					+ "(any other number to exit): ");
			choice = in.nextInt();
			if (choice == 2) {
				testRoombaRandomized();
			} else if (choice == 1){
				System.out.print("Choose a cycle 1-70 to turn on SPOT: ");
				int spotIndex = in.nextInt();
				System.out.print("Choose a cycle 1-70 to turn on GENERAL: ");
				int generalIndex = in.nextInt();
				System.out.print("Choose a cycle to turn on DUSTY SPOT "
						+ "*Should be a cycle >= GENERAL to be realistic, "
						+ "though the alternative still does function*: ");
				int dustyIndex = in.nextInt();
				System.out.println("");
				runRoombaTest(spotIndex, generalIndex, dustyIndex);
			}
		} while(choice == 1 || choice == 2);
		
		/** Cleanup */
		in.close();
		System.out.println("\nThank you for your time! :)");
	}

	/**
	 * Tests the Roomba in a randomized situation
	 */
	private static void testRoombaRandomized() {
		/** Choose random cycles to send commands / sensor inputs */
		int spotIndex = ThreadLocalRandom.current().nextInt(1, 71);
		int generalIndex = ThreadLocalRandom.current().nextInt(1, 71);
		int dustyIndex = ThreadLocalRandom.current().nextInt(generalIndex, 71);
		System.out.println("\nRandomized input: "
				+ "\nSpot Command on Cycle: " + spotIndex
				+ "\nGeneral Command on Cycle: " + generalIndex
				+ "\nSensor Sees Dust on Cycle: " + dustyIndex
				+ "\n");
		
		runRoombaTest(spotIndex, generalIndex, dustyIndex);
	}
	
	
	
	/**
	 * Simulates the Roomba running in the given situation
	 */
	private static void runRoombaTest(int spotIndex, int generalIndex, int dustyIndex) {
		/** Create BehaviorTree from the predefined structure in the enum */
		TreeGenerator generator = new TreeGenerator();
		TreeNode root = generator.generateTree();

		/** Create a Roomba with the BehaviorTree */
		Roomba roomba = new Roomba(root);
		
		/** Run simulation cycles */
		int cycle = 1;
		while(roomba.getBatteryLevel() >= 28) {

			if (cycle == spotIndex)
				roomba.setSpot(true);
			if (cycle == generalIndex)
				roomba.setGeneral(true);
			if (cycle == dustyIndex)
				roomba.setDustySpot(true);
			
			int batteryLevel = roomba.getBatteryLevel();
			System.out.println("---------- Running Cycle " + cycle + " ----------");
			System.out.println("Battery: " + batteryLevel);
			roomba.runCycle();
			cycle++;
			System.out.println();
		}
	}

}