Plan for HW 1 - Simple Reflex Agent

****************** DONE ******************

enum State
	- Success/Running/Failed states

enum TreeNodeType
	- string identifier
	- ClassType

enum BehaviorTreeStructure
	- Node arrangement of behavior tree for easy changing/updating
	
	
class TreeGenerator:
	generateTree();
	createNode();

abstract class TreeNode
- Instance Variables:
	- ArrayList children;
	- String descriptor;
	- TreeNodeType type;
- Methods:
	- public TreeNode(String descriptor, TreeNodeType type);
	- public int numChildren();
	- public TreeNode getChild(int index); 
	- public String getDescriptor();
	- public TreeNodeType getTreeNodeType() ;
	- public abstract State run();
* All subclasses of node should implement their own static run function.
Node subclasses:
- Composites:
	- Selection
	- Sequence
	- Priority
- Decorators:
	- Logical Negation
	- Until Succeeds
	- Until Fails
- Tasks:
	- DONE_GENERAL
	- DONE_SPOT
	- DO_NOTHING
	- FIND_HOME
	- GO_HOME
	- DOCK
	- CLEAN
	- CLEAN_SPOT
	- CLEAN_SPOT_EXTENDED
- Conditions:
	- BATTERY_LESS_THAN
	- SPOT
	- GENERAL
	- DUSTY_SPOT

class BehaviorTree
- Instance Variables:
	- TreeNode root;
	- HashMap<String, String> blackboard;
- Methods:
	- BehaviorTree();
	- int runCycle();

class BlackBoard:
- Instance Variables
	- int batteryLevel;
	- boolean spot;
	- boolean general;
	- boolean dustySpot;
	- String homePath;

class Roomba:
- Instance Variables:
	- BehaviorTree behavior_tree;
- Methods:
	- Roomba();
	- int run_cycle();

Simulation
	- Random Generation

****************** IN WORK ******************

GENERAL CLEANUP
- Brackets
- Access Keywords
- Documentation
- TODO
- README
****************** AWAITING IMPLEMENTAION ******************
