Plan for HW 1 - Simple Reflex Agent

****************** DONE ******************

enum State
	- Success/Running/Failed states

enum TreeNodeType
	- string identifier
	- ClassType

enum BehaviorTreeStructure
	- Node arrangement of behavior tree for easy changing/updating
	
	
class TreeGenerator:
	generateTree();
	createNode();

abstract class TreeNode
- Instance Variables:
	- ArrayList children;
	- String descriptor;
	- TreeNodeType type;
- Methods:
	- public TreeNode(String descriptor, TreeNodeType type);
	- public int numChildren();
	- public TreeNode getChild(int index); 
	- public String getDescriptor();
	- public TreeNodeType getTreeNodeType() ;
	- public abstract State run();
* All subclasses of node should implement their own static run function.
Node subclasses:
- Composites:
	- Selection
	- Sequence
	- Priority
- Decorators:
	- Logical Negation
	- Until Succeeds
	- Until Fails
- Tasks:
	- DONE_GENERAL
	- DONE_SPOT
	- DO_NOTHING
	- FIND_HOME
	- GO_HOME
	- DOCK
	- CLEAN
- Conditions:
	- BATTERY_LESS_THAN
	- SPOT
	- GENERAL
	- DUSTY_SPOT

class BehaviorTree
- Instance Variables:
	- TreeNode root;
	- HashMap<String, String> blackboard;
- Methods:
	- BehaviorTree();
	- int runCycle();

class BlackBoard:
- Instance Variables
	- int batteryLevel;
	- boolean spot;
	- boolean general;
	- boolean dustySpot;
	- String homePath;

class Roomba:
- Instance Variables:
	- BehaviorTree behavior_tree;
- Methods:
	- Roomba();
	- int run_cycle();

****************** IN IMPLEMENTATION ******************

* Need to implement run()
Decorators:
- Timer
	- Needs to loop through
Tasks:
- CLEAN_SPOT
	
****************** AWAITING IMPLEMENTAION ******************
Simulation
	- Random Generation

Questions
- Do timer nodes stop execution of a cycle
- How does a Sequence/Selection node react if a child returns RUNNING?

GENERAL CLEANUP
- Brackets
- Access Keywords
- Documentation
- TODO
- README

REFERENCE GENERIC CONSTRUCTOR/METHOD RETRIEVAL
/*
public void testMethod() {
	
	TreeNode node;
	Method method;
	Constructor<?> constructor;
	
	try {
		constructor = TreeNodeType.DO_NOTHING.getClassType().getConstructor(String.class, BlackBoard.class);
		node = (TreeNode) constructor.newInstance("yey", null);
		method = TreeNodeType.DO_NOTHING.getClassType().getMethod("run");
		method.invoke(node);
		System.out.println("Success!");
	} catch (Exception e) {
		System.out.println("Error executing retrieved method in TreeGenerator.java. Exiting...");
		System.exit(1);
	}
}
*/